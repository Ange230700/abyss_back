// prisma\schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =====================
// Prisma Schema
// =====================

model user {
  id        Int    @id @default(autoincrement())
  user_name String
  email     String
  password  String
  role      role

  favorites favorite[]

  deleted_at DateTime?
}

model favorite {
  id           Int     @id @default(autoincrement())
  id_furniture Int
  id_user      Int
  is_favorite  Boolean

  // Relations
  furniture furniture @relation(fields: [id_furniture], references: [id], onDelete: Cascade)
  user      user      @relation(fields: [id_user], references: [id], onDelete: Cascade)

  deleted_at DateTime?
}

model furniture {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  id_type     Int
  size        String
  colour      String
  quantity    Int
  price       Float
  status      status

  // Relations
  type      furnituretype       @relation(fields: [id_type], references: [id], onDelete: Cascade)
  favorites favorite[]
  images    image[]
  materials furniturematerial[]

  deleted_at DateTime?
}

model furnituretype {
  id   Int    @id @default(autoincrement())
  name String

  furniture furniture[]

  deleted_at DateTime?
}

model furniturematerial {
  id           Int @id @default(autoincrement())
  id_furniture Int
  id_material  Int

  // Relations
  furniture furniture @relation(fields: [id_furniture], references: [id], onDelete: Cascade)
  material  material  @relation(fields: [id_material], references: [id], onDelete: Cascade)

  deleted_at DateTime?
}

model material {
  id   Int    @id @default(autoincrement())
  name String

  furnitureMaterials furniturematerial[]

  deleted_at DateTime?
}

model image {
  id           Int    @id @default(autoincrement())
  id_furniture Int
  url          String

  furniture furniture @relation(fields: [id_furniture], references: [id], onDelete: Cascade)

  deleted_at DateTime?
}

// ==============
// Enums
// ==============
enum role {
  admin
  visitor
  customer
  seller
}

enum status {
  Available
  Out_of_stock
}
